weight_ID("7-Jun-20")
cages7june3 <- bring_in_data("cold/7June20/7_june_20_3.csv", "M")
weight_ID("7-Jun-20")
cages7june4 <- bring_in_data("cold/7June20/7_june_20_4.csv", "M")
cages7june <- merge_data(rbind(cages7june2, cages7june3, cages7june4))
ggplot(data = cages7june, aes(x = as.POSIXct(with(cages7june, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
# Establish when each interval/transition starts and stops in seconds
#Daytime interval: hrs:8:00-21:00
daytime_interval <- period_to_seconds(hms("09:00:00")):period_to_seconds(hms("20:00:00"))
#Night time: hrs 22:00-5:00 (do NOT do a 22:5 sequence as it will count backwards from 22 to 5...)
nighttime_interval <- c((period_to_seconds(hms("21:00:01")):period_to_seconds(hms("24:59:59"))), #evening portion of 'nighttime'
(period_to_seconds(hms("00:00:00")):period_to_seconds(hms("06:00:00")))) #morning portion of 'nightitme'
baseline <- rbind(cages26feb, cages10mar, cages20feb, cages14mar)
baseline$experiment <- "baseline"
baseline$FQ <- 0.8907387
baseline$seconds <- as.numeric(baseline$StartTime)
#baseline$TimeOfDay <- ifelse(baseline$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
baseline <- baseline %>% filter(animal %in% target)
cold <- rbind(cages20april, cages27april, cages30april, cages7june)
cold$experiment <- "cold"
cold$FQ <- 0.8907387
cold$seconds <- as.numeric(cold$StartTime)
#cold$TimeOfDay <- ifelse(cold$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
cold <- cold %>% filter(animal %in% target)
hot <- rbind(cages18may, cages25may, cages29may, cages3june)
hot$experiment <- "hot"
hot$FQ <- 0.8907387
hot$seconds <- as.numeric(hot$StartTime)
#hot$TimeOfDay <- ifelse(hot$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
hot <- hot %>% filter(animal %in% target)
dehydration <- cages16april
dehydration$experiment <- "dehydration"
dehydration$FQ <- 0.8907387
target <- c(0,1,2,3,4,5,6)
dehydration <- dehydration %>% filter(animal %in% target)
all_animals <- rbind(hot, cold, baseline)
length(all_animals)
#remove empty cage
target <- c(0,1,2,3,4,5,6)
cages <- all_animals %>% filter(animal %in% target)
write_csv(cages, "~/Box Sync/Cactus_Mouse_Physiology/data/5015_lowfat/cages.csv")
legend_title <- "Animal ID"
ggplot(cages, aes(Deg_C, EE, color = experiment)) +
geom_point()
#scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
#scale_colour_viridis_d(legend_title, option = "C") +
#ylim()
analysis_data <- cages[,c("Sex","EE","H2Omg", "RQ", "StartTime","Animal_ID", "VO2", "VCO2", "Deg_C", "weight", "experiment", "SD_VCO2", "SD_VO2", "StartDate", "SD_H2Omg", "FQ")]
#split the time up by hour to make it an easier vairable to work with
analysis_data_edited <- data.frame(do.call('rbind', strsplit(as.character(analysis_data$StartTime),':',fixed=TRUE)))
#add it back to the subseted data for analysis
analysis_data_inter <- cbind(analysis_data,analysis_data_edited)
analysis_data_final <- analysis_data_inter[,c("Sex","EE","H2Omg", "RQ","Animal_ID", "Deg_C", "weight", "experiment", "X1", "StartTime", "SD_VCO2", "SD_VO2", "SD_H2Omg", "VO2", "VCO2", "StartDate", "FQ")]
analysis_data_final$Sex <- as.factor(analysis_data_final$Sex)
analysis_data_final$hour <- analysis_data_final$X1
analysis_data_final$X1 <- NULL
analysis_data_final$Deg_C <- as.double(analysis_data_final$Deg_C)
analysis_data_final$Animal_ID <- as.numeric(analysis_data_final$Animal_ID)
analysis_data_final$experiment <- as.factor(analysis_data_final$experiment)
names(analysis_data_final)[3] <- "H2Omg"
unique(analysis_data_final$Animal_ID)
write_csv(analysis_data_final, path = "/Users/danielleblumstein/Desktop/analysis_data_final.csv")
metric0 <- "Deg_C"
target <- 7
#the "cages20april" is what you will need to change to look at whatever temperature you are interest in
cagetemp <- cages14mar %>% filter(animal %in% target)
cagetemp <- tail(cagetemp, n=320)
measurement_zero <- cagetemp %>%  dplyr::select(all_of(metric0))
df<-as.data.frame(measurement_zero[[metric0]])
temp_baseline <- ggplot(data = cagetemp,aes(x=as.POSIXct(StartTime),y=measurement_zero[[metric0]])) +
geom_line(aes(), size = 2) +
#theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12), legend.position = "none") +
labs(x = "", y = metric0) +
scale_colour_viridis_d(legend_title, option = "C") +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
metric1 <- "RQ"
measurement_one <- cages %>%  dplyr::select(all_of(metric1))
df<-as.data.frame(measurement_one[[metric1]])
legend_title <- "Animal ID"
RQ <- ggplot(data = cages,aes(color=factor(experiment),x=as.POSIXct(StartTime),y=measurement_one[[metric1]]))+
geom_point(aes(alpha=0.2, group=as.factor(experiment), color=as.factor(experiment)), size = 1)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric1)+
scale_color_manual(legend_title, values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_hline(yintercept = 0.8907387, color='orange', size=1)+
ylim(0.5, 2)+
guides(alpha=FALSE)
metric2 <- "EE"
measurement_two <- cages %>%  dplyr::select(all_of(metric2))
df<-as.data.frame(measurement_two[[metric2]])
legend_title <- "Animal ID"
EE <- ggplot(data = cages,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_two[[metric2]]))+
geom_point(aes(alpha=0.2,group=as.factor(experiment), color=as.factor(experiment)), size = 1,)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12), legend.position = "none")+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric2)+
scale_color_manual(values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
metric3 <- "H2Omg"
measurement_three <- cages %>%  dplyr::select(all_of(metric3))
df<-as.data.frame(measurement_three[[metric3]])
legend_title <- "Animal ID"
h2o <- ggplot(data = cages,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_three[[metric3]]))+
geom_point(aes(alpha=0.2,group=as.factor(experiment), color=as.factor(experiment)), size = 1)+
theme(axis.text.y=element_text(size=12), legend.position = "none", axis.text.x=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.1, level=0.99)+
labs(x = "", y = metric3)+
scale_color_manual(values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
RQ/EE/h2o
unique(analysis_data_final$hour)
p1 <- ggplot(analysis_data_final, aes(RQ, EE, color = Sex)) +
geom_point()
#p2 <- ggplot(analysis_data_final, aes(H2Omg, EE, color = hour , shape=Sex)) +
#geom_point() +
#scale_color_viridis(direction = -1) +
#scale_colour_gradient2(low = "blue", mid = "red", high = "blue", midpoint = 12)
#theme_minimal()
p3 <- ggplot(analysis_data_final, aes(RQ, H2Omg, color =Sex)) +
geom_point()
p4 <- ggplot(analysis_data_final, aes(RQ, Deg_C, color =Sex)) +
geom_point()
p5 <- ggplot(analysis_data_final, aes(EE, Deg_C, color =Sex)) +
geom_point()
p6 <- ggplot(analysis_data_final, aes(H2Omg, Deg_C, color =Sex)) +
geom_point()
p7 <- ggplot(all_animals, aes(weight, EE, color = Sex)) +
geom_point()
#plot weight line for males and for females with a regression (male and female mean)
p1/p3/p4/p5/p6/p7
night <- with(analysis_data_inter ,analysis_data_inter[ hour( StartTime ) >= 0 & hour( StartTime ) < 6 , ] )
day <- with(analysis_data_inter ,analysis_data_inter[ hour( StartTime ) >= 13 & hour( StartTime ) < 19 , ] )
animalweight <- night %>% group_by(Animal_ID) %>% summarise(weight = mean(weight))  %>% dplyr::select(weight)
# this is the code to change - when changing the thing you want to plot.
#meanVCO2 <- day %>% group_by(Animal_ID) %>% summarise(VCO2 = mean(VO2)) %>% dplyr::select(VCO2)
df = iris
#install.packages("car")
library(car)
leveneTest(EE~experiment,cages)
fit = aov(EE~experiment,cages)
summary(fit)
#install.packages("psych")
library(psych)
describeBy(cages$EE, cages$experiment)
library(ggplot2)
VO2_box <- ggplot(analysis_data_final,aes(y=VO2, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
EE_box <- ggplot(analysis_data_final,aes(y=EE, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
H2O_box <- ggplot(analysis_data_final,aes(y=H2Omg, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
RQ_box <- ggplot(analysis_data_final,aes(y=RQ, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "Hour")
VO2_box/EE_box/H2O_box/RQ_box
ggplot(analysis_data_final,aes(y=VO2, x=hour, color=experiment))+
stat_summary(fun.y="mean", geom="point")+
stat_summary(fun.y="mean", geom="line")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "Hour")
fit2=aov(EE~experiment+weight,cages)
Anova(fit2, type="III")
weight_ID("27-Jan-21")
cages27jan <- bring_in_data("immature/27Jan21/27Jan21_3.csv", "U")
ggplot(cages27jan, aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))),y=Deg_C))+
geom_line()
target <- c(0,1,2,3,4,5,6)
cages27jan <- cage
metric1 <- "RQ"
measurement_one <- cages27jan %>%  dplyr::select(all_of(metric1))
df<-as.data.frame(measurement_one[[metric1]])
legend_title <- "Animal ID"
RQ <- ggplot(data = cages27jan,aes(color = as.factor(Animal_ID), x=as.POSIXct(StartTime),y=measurement_one[[metric1]]))+
geom_hline(yintercept = 0.8907387, color='yellow', size=1)+
geom_hline(yintercept = 0.92266, color='green', size=1)+
geom_point(aes(alpha=0.2,group=as.factor(Animal_ID), color=as.factor(Animal_ID)), size = 1,)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric1)+
#scale_color_manual(legend_title, values=c("#050505", "#FF3338"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
ylim(0.5, 2)+
guides(alpha=FALSE)
metric2 <- "EE"
measurement_two <- cages27jan %>%  dplyr::select(all_of(metric2))
df<-as.data.frame(measurement_two[[metric2]])
legend_title <- "Animal ID"
EE <- ggplot(data = cages27jan,aes(colour=factor(StartDate),x=as.POSIXct(StartTime),y=measurement_two[[metric2]]))+
geom_point(aes(alpha=0.2,group=as.factor(StartDate), color=as.factor(StartDate)), size = 1,)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12), legend.position = "none")+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric2)+
#scale_color_manual(values=c("#050505", "#FF3338"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
metric3 <- "H2Omg"
measurement_three <- cages27jan %>%  dplyr::select(all_of(metric3))
df<-as.data.frame(measurement_three[[metric3]])
legend_title <- "Animal ID"
h2o <- ggplot(data = cages27jan,aes(colour=factor(StartDate),x=as.POSIXct(StartTime),y=measurement_three[[metric3]]))+
geom_point(aes(alpha=0.2,group=as.factor(StartDate), color=as.factor(StartDate)), size = 1)+
theme(axis.text.y=element_text(size=12), legend.position = "none", axis.text.x=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.1, level=0.99)+
labs(x = "", y = metric3)+
#scale_color_manual(values=c("#050505", "#FF3338"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
RQ/EE/h2o
#load packages
library(tidyverse)
library(lubridate)
library(readr)
# Change variables to plot VO2, in this case.
metric <- "RQ"
#SD <- "SD_VO2"
measurementRQ <- cages27jan %>% dplyr::select("RQ")
#measurement_SD <- cages27jan %>% select(SD)
df<-as.data.frame(measurementRQ[["RQ"]])
legend_title <- "Animal ID"
RQ_all<- cages27jan %>%
ggplot(aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))), y=measurementRQ[["RQ"]]))+
geom_point(aes(group=as.factor(Animal_ID), color=as.factor(Animal_ID)))+
geom_hline(yintercept = 0.8907387, color='yellow', size=1)+
#geom_hline(yintercept = 0.92266, color='green', size=1)+
labs(x = "", y = "RQ", fill = "Animal") +
scale_color_brewer(palette="Paired") +
#geom_pointrange(aes(ymax = c(measurement[[metric]] + measurement_SD[[SD]]), ymin = c(measurement[[metric]] - measurement_SD[[SD]]))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0.5, 1.5)+
geom_smooth(data=df$V1, method='loess', span=.3)+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
metric <- "EE"
#SD <- "SD_VO2"
measurementEE <- cages27jan %>% dplyr::select("EE")
#measurement_SD <- cages27jan %>% select(SD)
df<-as.data.frame(measurementEE[["EE"]])
legend_title <- "Animal ID"
EE_all<- cages27jan %>%
ggplot(aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))), y=measurementEE[["EE"]]))+
geom_point(aes(group=as.factor(Animal_ID), color=as.factor(Animal_ID)))+
labs(x = "", y = "EE") +
scale_color_brewer(palette="Paired") +
#geom_pointrange(aes(ymax = c(measurement[[metric]] + measurement_SD[[SD]]), ymin = c(measurement[[metric]] - measurement_SD[[SD]]))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_smooth(data=df$V1, method='loess', span=.3)+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), legend.position = "none")
metric <- "H2Omg"
#SD <- "SD_VO2"
measurementH20 <- cages27jan %>% dplyr::select("H2Omg")
#measurement_SD <- cages27jan %>% select(SD)
df<-as.data.frame(measurementH20[["H2Omg"]])
legend_title <- "Animal ID"
H2Omg_all<- cages27jan %>%
ggplot(aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))), y=measurementH20[["H2Omg"]]))+
geom_point(aes(group=as.factor(Animal_ID), color=as.factor(Animal_ID)))+
labs(x = "", y = "H2Omg") +
scale_color_brewer(palette="Paired") +
#geom_pointrange(aes(ymax = c(measurement[[metric]] + measurement_SD[[SD]]), ymin = c(measurement[[metric]] - measurement_SD[[SD]]))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_smooth(data=df$V1, method='loess', span=.3)+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
temp <- cages27jan %>%
ggplot(aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))),y=Deg_C))+
geom_line()+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
temp/RQ_all/EE_all/H2Omg_all
#ggplot(cages27jan, aes(as.POSIXct(with(cages27jan, StartDate + hms(StartTime))),y=Deg_C))+
#scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
#geom_line()
prob3 <- read.csv("~/Documents/UNH/classes/ANFS_933/midterm/prob3.csv", header=FALSE)
View(prob3)
prob3
prob3
prob3 <- read.csv("~/Documents/UNH/classes/ANFS_933/midterm/prob3.csv", header=T)
prob3
#read in, inspect, and re-classify the data
prob3$school<-as.factor(prob3$school)
prob3$teacher<-as.factor(prob3$teacher)
prob3$hours<-as.factor(prob3$hours)
prob3$unit<-as.factor(prob3$unit)
str(prob3)
#The ANOVA
prob3_mod<-lm(score1 ~ school + teacher:school + hours + unit, prob3)
anova(prob3_mod)
#Tukey HSD
Tukey <- HSD.test(prob3_mod, "unit")
library(agricolae)
#Tukey HSD
Tukey <- HSD.test(prob3_mod, "unit")
Tukey
#TESTING ASSUMPTIONS
#Generate residual and predicted values
prob3$resids <- residuals(prob3_mod)
prob3
prob3 <- read.csv("~/Documents/UNH/classes/ANFS_933/midterm/prob3.csv", header=T)
#read in, inspect, and re-classify the data
prob3$school<-as.factor(prob3$school)
prob3$teacher<-as.factor(prob3$teacher)
prob3$hours<-as.factor(prob3$hours)
prob3$unit<-as.factor(prob3$unit)
str(prob3)
#The ANOVA
prob3_mod<-lm(score1 ~ school + teacher:school + hours + unit, prob3)
anova(prob3_mod)
library(agricolae)
#Tukey HSD
Tukey <- HSD.test(prob3_mod, "unit")
#TESTING ASSUMPTIONS
#Generate residual and predicted values
prob3$resids <- residuals(prob3_mod)
prob3$preds <- predict(prob3_mod)
#Perform a Shapiro-Wilk test for normality of residuals
shapiro.test(prob3$resids)
#Perform Levene's Test for homogenity of variances among treatment levels
#library(car)
leveneTest(score1 ~ unit, data = prob3)
#Perform a Shapiro-Wilk test for normality of residuals
shapiro.test(prob3$resids)
#Perform Levene's Test for homogenity of variances among treatment levels
#library(car)
leveneTest(score1 ~ unit, data = prob3)
#Testing for significance of the hours:unit interaction
prob3_CT_mod<-lm(score1 ~ hours + unit, prob3)
CT_preds <- predict(prob3_CT_mod)
prob3$CT_sqpreds <- CT_preds^2
plow_CT_Tukey_mod<-lm(score1 ~ hours + unit + CT_sqpreds, prob3)
anova(plow_CT_Tukey_mod)
#The ANOVA
prob3_mod<-lm(score1 ~ school + teacher:school + hours + unit, prob3)
anova(prob3_mod)
prob2_mod
#Tukey
Tukey <- HSD.test(prob2_mod, "Captivity")
Tukey
prob2_mod
Tukey <- HSD.test(prob2_mod, "breeding")
Tukey
#Tukey
Tukey <- HSD.test(prob2_mod, "Captivity")
Tukey
library(ggplot2)
ggplot(data = prob2, aes(x=eggs, y=Captivity, color=as.factor(eggs)))+
geom_boxplot()+
theme(legend.position = "none")+
labs(x = "eggs")
ggplot(data = prob2, aes(x=Captivity, y=eggs, color=as.factor(Captivity)))+
geom_boxplot()+
theme(legend.position = "none")+
labs(x = "eggs")
prob2_mod
regwq(formula = eggs ~ Captivity + breeding + sq_preds, data = prob2, 0.05, MSE=NULL, df=NULL, silent=FALSE)
install.packages("mutoss")
library(mutoss)
regwq(formula = eggs ~ Captivity + breeding + sq_preds, data = prob2, 0.05, MSE=NULL, df=NULL, silent=FALSE)
#phi <- sqrt((r/mse)*sum(tau^2/t))
prob2
HWB <- c(1.743,1.833,1.802,1.996,1.662)
one_MCP <- c(1.840,1.761,1.869,1.725,1.978)
HW_MCP <- c(1.734,1.653,1.526,1.689,1.556)
Control <- c(2.014,1.915,2.086,1.953,1.779)
hw_1_1<- data.frame(HWB,one_MCP,HW_MCP,Control)
str(hw_1_1)
shapiro.test(hw_1_1$HWB)
shapiro.test(hw_1_1$one_MCP)
shapiro.test(hw_1_1$HW_MCP)
shapiro.test(hw_1_1$Control)
#all are normally distributed
hw_2 <- read.csv("~/Documents/UNH/classes/ANFS_933/hw2/hw_2.csv")
overall_mean <- mean(hw_2$Mean.Fe.in.Blood..ppm.)
sst<- 8*sum((hw_2$Mean.Fe.in.Blood..ppm. - overall_mean)^2)
sst
sse <- sum(hw_2$Standard.Deviation^2)
sse
t = 5
n = 8*5
mst <- sst/(t-1)
mst
mse <- sse/(t)
mse
f <- mst/mse
f
pval <- pf(f, 4, 35, lower.tail = F)
pval
hw_2$Standard.Deviation
hw_2
hw_2 <- read.csv("~/Documents/UNH/classes/ANFS_933/hw2/hw_2.csv")
hw_2
prob2
sd <- aggregate(prob2$eggs, list(prob2$Captivity), sd)
sd
sse <- sum(sd$x^2)
sd
#phi <- sqrt((r/mse)*sum(tau^2/t))
prob2
overall_mean <- mean(prob2$eggs)
sd <- aggregate(prob2$eggs, list(prob2$Captivity), sd)
sse <- sum(sd$x^2)
sse
t <- 5
mse <- sse/(t)
mse
rep <- 4 #?
num <- sum((prob2$eggs - overall_mean)^2)
tau <- num/t
phi <- sqrt(rep/mse *tau)
phi
phi
prob2
#phi <- sqrt((r/mse)*sum(tau^2/t))
prob2
overall_mean <- mean(prob2$eggs)
sd <- aggregate(prob2$eggs, list(prob2$breeding), sd)
sse <- sum(sd$x^2)
sse
t <- 5
mse <- sse/(t)
mse
rep <- 4 #?
num <- sum((prob2$eggs - overall_mean)^2)
tau <- num/t
phi <- sqrt(rep/mse *tau)
phi
sd
#The ANOVA
prob3_mod<-lm(score1 ~ school + teacher:school + hours + unit, prob3)
anova(prob3_mod)
#Tukey?
Tukey <- HSD.test(prob2_mod, "Captivity")
source("http://bioconductor.org/biocLite.R")
biocLite("multtest")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
biocLite("multtest")
BiocManager::available()
BiocManager::install("multtest")
#Then install the package "mutoss" as usual.  The REGWQ analysis:
library(mutoss)
regwq(clover.mod, clover.dat, alpha = 0.05)
regwq(prob2_mod, prob2, alpha = 0.05)
regwq
sq_preds
#Null hypothesis: the model effects are additive
#Perform a Tukey 1-df Test for Non-additivity
prob2_mod<-lm(eggs ~ Captivity + breeding + sq_preds, prob2)
anova(prob2_mod)
#There is an insignificant p value of 0.65232, so we fail to reject the null. The model effects are additive.
library(ggplot2)
ggplot(data = prob2, aes(x=Captivity, y=eggs, color=as.factor(Captivity)))+
geom_boxplot()+
theme(legend.position = "none")+
labs(x = "eggs")
sq_preds
regwq(eggs ~ Captivity + breeding + sq_preds, prob2, alpha = 0.05)
regwq(eggs ~ Captivity, prob2, alpha = 0.05)
regwq(eggs ~ Captivity+ breeding, prob2, alpha = 0.05)
regwq(eggs ~ Captivity, prob2, alpha = 0.05)
regwq(eggs ~ breeding, prob2, alpha = 0.05)
regwq(eggs ~ breeding, prob2, alpha = 0.05)
regwq(eggs ~ Captivity, prob2_mod, alpha = 0.05)
#Null hypothesis: the model effects are additive
#Perform a Tukey 1-df Test for Non-additivity
prob2_mod<-lm(eggs ~ Captivity + breeding + sq_preds, prob2)
anova(prob2_mod)
#There is an insignificant p value of 0.65232, so we fail to reject the null. The model effects are additive.
library(ggplot2)
ggplot(data = prob2, aes(x=Captivity, y=eggs, color=as.factor(Captivity)))+
geom_boxplot()+
theme(legend.position = "none")+
labs(x = "eggs")
#TESTING ASSUMPTIONS
#Generate residual and predicted values
prob2$resids <- residuals(prob2_mod)
prob2$preds <- predict(prob2_mod)
prob2$sq_preds <- prob2$preds^2
head(prob2)
plot(resids ~ preds, data = prob2,
xlab = "Predicted Values",
ylab = "Residuals")
#There is no apparent pattern in this plot of the residuals versus the predicted values. This means that there are no problems with nonadditivity or homogeneity. This is confirmed by the Shapiro Test, the Levene Test, and the Tukey test of nonadditivity.
#Then install the package "mutoss" as usual.  The REGWQ analysis:
#library(mutoss)
regwq(eggs ~ Captivity, prob2_mod, alpha = 0.05)
#Then install the package "mutoss" as usual.  The REGWQ analysis:
#library(mutoss)
regwq(eggs ~ Captivity, prob2, alpha = 0.05)
help(regwq)
